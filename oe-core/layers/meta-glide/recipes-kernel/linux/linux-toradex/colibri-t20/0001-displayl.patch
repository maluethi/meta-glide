diff --git a/arch/arm/mach-tegra/board-colibri_t20.c b/arch/arm/mach-tegra/board-colibri_t20.c
--- a/arch/arm/mach-tegra/board-colibri_t20.c
+++ b/arch/arm/mach-tegra/board-colibri_t20.c
@@ -44,8 +44,8 @@
 #include <mach/usb_phy.h>
 #include <mach/w1.h>

-#include <media/soc_camera.h>
-#include <media/tegra_v4l2_camera.h>
+#include <linux/input.h>
+#include <linux/rotary_encoder.h>

 #include "board-colibri_t20.h"
 #include "board.h"
@@ -55,6 +55,9 @@
 #include "gpio-names.h"
 #include "pm.h"
 #include "wakeups-t2.h"
+
+// This build is for the Evaluation Board !!
+#define EVAL_BOARD

 //from former drivers/mtd/maps/tegra_nor.h
 #define TEGRA_GMI_PHYS			0x70009000
@@ -338,13 +341,18 @@
 #define CAN_RESET_GPIO		TEGRA_GPIO_PK2
 #else
 /* active low interrupt (MCP2515 nINT) */
+#ifdef EVAL_BOARD
 #define CAN_INTERRUPT_GPIO	TEGRA_GPIO_PA0
+#else
+#define CAN_INTERRUPT_GPIO	TEGRA_GPIO_PT1
+#endif
 #ifdef MECS_TELLURIUM
 /* active high reset (not MCP2515 nRESET) */
 #define CAN_RESET_GPIO		TEGRA_GPIO_PK4
 #endif
 #endif

+#ifdef EVAL_BOARD
 static int __init colibri_t20_mcp2515_setup(struct spi_device *spi)
 {
 #ifdef MECS_TELLURIUM
@@ -355,7 +363,7 @@

 #ifdef MECS_TELLURIUM
 	/* configure MCP2515 reset line as output and pull high into reset */
-	gpio_status = gpio_request(CAN_RESET_GPIO, "CAN_RESET_GPIO");
+	gpio_status = gpio_request(CAN_RESET_GPIO, "CAN_RESET_GPIO (MECS_TELLURIUM)");
 	if (gpio_status < 0)
 		pr_warning("CAN_RESET_GPIO request GPIO FAILED\n");
 	gpio_status = gpio_direction_output(CAN_RESET_GPIO, 1);
@@ -373,6 +381,35 @@

 	return 0;
 }
+#else
+#define CAN_RESET_GPIO		TEGRA_GPIO_PT4
+static int __init colibri_t20_mcp2515_setup(struct spi_device *spi)
+{
+	int gpio_status;
+	printk("Display-L CAN Initialisation\n");
+
+	/* configure MCP2515 reset line as output and pull high into reset */
+	gpio_status = gpio_request(CAN_RESET_GPIO, "CAN_RESET_GPIO (Display-L)");
+	if (gpio_status < 0)
+		pr_warning("CAN_RESET_GPIO request GPIO FAILED\n");
+	gpio_status = gpio_direction_output(CAN_RESET_GPIO, 0);
+	if (gpio_status < 0)
+		pr_warning("CAN_RESET_GPIO request GPIO DIRECTION FAILED\n");
+
+	udelay(2);
+
+	/* pull out of reset */
+	gpio_set_value(CAN_RESET_GPIO, 1);
+
+   /* set SN65HVD1050 pin S LOW for high-speed mode */
+   gpio_request(TEGRA_GPIO_PA0, "CAN_STB_GPIO");
+   gpio_direction_output(TEGRA_GPIO_PA0, 0);
+	printk("Display-L CAN STB set\n");
+	return 0;
+}
+#endif
+
+

 #ifndef MECS_TELLURIUM_XPOD2
 static struct tegra_spi_device_controller_data mcp251x_controller_data = {
@@ -384,7 +421,11 @@

 static struct mcp251x_platform_data mcp251x_pdata = {
 	.board_specific_setup	= colibri_t20_mcp2515_setup,
+#ifdef EVAL_BOARD
 	.oscillator_frequency	= 16000000,
+#else
+	.oscillator_frequency	= 20000000,
+#endif
 	.power_enable		= NULL,
 	.transceiver_enable	= NULL
 };
@@ -394,7 +435,7 @@
 #ifndef MECS_TELLURIUM_XPOD2
 		.bus_num		= 3,
 #else
-		.bus_num		= 4,
+		.bus_num		= 4,  // todo -- check!! (was 4)
 #endif
 		.chip_select		= 0,
 #ifdef MECS_TELLURIUM_XPOD2
@@ -497,21 +538,21 @@
 //conflicts with CAN interrupt on Colibri Evaluation Board and MECS Tellurium
 //xPOD1 CAN
 //conflicts with DAC_PSAVE# on Iris
-	{TEGRA_GPIO_PA0,	GPIOF_IN,	"SODIMM pin 73"},
+//	{TEGRA_GPIO_PA0,	GPIOF_IN,	"SODIMM pin 73"},
 #endif
 	{TEGRA_GPIO_PA2,	GPIOF_IN,	"SODIMM pin 186"},
 	{TEGRA_GPIO_PA3,	GPIOF_IN,	"SODIMM pin 184"},
 	{TEGRA_GPIO_PB2,	GPIOF_IN,	"SODIMM pin 154"},
 #if !defined(CONFIG_SPI_GPIO) && !defined(CONFIG_SPI_GPIO_MODULE)
 //conflicts with MECS Tellurium xPOD2 SSPCLK2
-	{TEGRA_GPIO_PB6,	GPIOF_IN,	"SODIMM pin 55"},
+//	{TEGRA_GPIO_PB6,	GPIOF_IN,	"SODIMM pin 55"},
 #endif
 #ifndef MECS_TELLURIUM_XPOD2
 //conflicts with MECS Tellurium xPOD2 SSPFRM2
 	{TEGRA_GPIO_PB7,	GPIOF_IN,	"SODIMM pin 63"},
 #endif
 #ifndef COLIBRI_T20_VI
-	{TEGRA_GPIO_PD5,	GPIOF_IN,	"SODI-98, Iris X16-13"},
+//	{TEGRA_GPIO_PD5,	GPIOF_IN,	"SODI-98, Iris X16-13"},
 	{TEGRA_GPIO_PD6,	GPIOF_IN,	"SODIMM pin 81"},
 	{TEGRA_GPIO_PD7,	GPIOF_IN,	"SODIMM pin 94"},
 #endif
@@ -526,7 +567,7 @@
 	(!defined(CONFIG_TOUCHSCREEN_ATMEL_MXT) && \
 	!defined(CONFIG_TOUCHSCREEN_ATMEL_MXT_MODULE))
 //conflicts with CAN reset on MECS Tellurium xPOD1 CAN
-	{TEGRA_GPIO_PK4,	GPIOF_IN,	"SODIMM pin 106"},
+//	{TEGRA_GPIO_PK4,	GPIOF_IN,	"SODIMM pin 106"},
 #endif
 //	{TEGRA_GPIO_PK5,	GPIOF_IN,	"USBC_DET"},
 #ifndef CONFIG_KEYBOARD_GPIO
@@ -567,7 +608,7 @@
 	{TEGRA_GPIO_PP7,	GPIOF_IN,	"SODIMM pin 188"},
 #ifndef COLIBRI_T20_VI
 	{TEGRA_GPIO_PT0,	GPIOF_IN,	"SODIMM pin 96"},
-	{TEGRA_GPIO_PT1,	GPIOF_IN,	"SODIMM pin 75"},
+//	{TEGRA_GPIO_PT1,	GPIOF_IN,	"SODIMM pin 75"},
 #endif
 	{TEGRA_GPIO_PT2,	GPIOF_IN,	"SODIMM pin 69"},
 #ifndef CONFIG_KEYBOARD_GPIO
@@ -580,12 +621,12 @@
 	{TEGRA_GPIO_PU6,	GPIOF_IN,	"SODIMM pin 118"},
 #ifndef CONFIG_KEYBOARD_GPIO
 //conflicts with power key (WAKE1)
-	{TEGRA_GPIO_PV3,	GPIOF_IN,	"SODI-45, Iris X16-20"},
+//	{TEGRA_GPIO_PV3,	GPIOF_IN,	"SODI-45, Iris X16-20"},
 #endif

 	{TEGRA_GPIO_PX4,	GPIOF_IN,	"SODIMM pin 134"},
-	{TEGRA_GPIO_PX6,	GPIOF_IN,	"102, I X13 ForceOFF#"},
-	{TEGRA_GPIO_PX7,	GPIOF_IN,	"104, I X14 ForceOFF#"},
+//	{TEGRA_GPIO_PX6,	GPIOF_IN,	"102, I X13 ForceOFF#"},
+//	{TEGRA_GPIO_PX7,	GPIOF_IN,	"104, I X14 ForceOFF#"},
 	{TEGRA_GPIO_PZ2,	GPIOF_IN,	"SODIMM pin 156"},
 	{TEGRA_GPIO_PZ4,	GPIOF_IN,	"SODIMM pin 164"},
 #if !defined(GMI_32BIT) && !defined SDHCI_8BIT
@@ -596,7 +637,7 @@
 #endif
 #ifndef CONFIG_KEYBOARD_GPIO
 //conflicts with back key
-	{TEGRA_GPIO_PBB2,	GPIOF_IN,	"SOD-133, Iris X16-14"},
+//	{TEGRA_GPIO_PBB2,	GPIOF_IN,	"SOD-133, Iris X16-14"},
 //conflicts with home key
 	{TEGRA_GPIO_PBB3,	GPIOF_IN,	"SODIMM pin 127"},
 //conflicts with volume up key
@@ -604,6 +645,128 @@
 //conflicts with volume down key
 	{TEGRA_GPIO_PBB5,	GPIOF_IN,	"SODIMM pin 24"},
 #endif
+};
+/* Rotary encoder */
+#define GPIO_ROTARY0_A TEGRA_GPIO_PK4
+#define GPIO_ROTARY0_B TEGRA_GPIO_PX7
+#define GPIO_ROTARY1_A TEGRA_GPIO_PX6
+#ifdef EVAL_BOARD
+#define GPIO_ROTARY1_B TEGRA_GPIO_PCC2
+#else
+#define GPIO_ROTARY1_B TEGRA_GPIO_PD5
+#endif
+static struct rotary_encoder_platform_data my_rotary_encoder_info0 = {
+        .steps         = 16,
+        .axis          = REL_X,
+        .relative_axis = true,
+        .rollover      = true,
+        .gpio_a                = GPIO_ROTARY0_A,
+        .gpio_b                = GPIO_ROTARY0_B,
+        .inverted_a    = 0,
+        .inverted_b    = 0,
+        .half_period   = true,
+};
+
+static struct platform_device rotary_encoder_device0 = {
+        .name          = "rotary-encoder",
+        .id            = 0,
+        .dev           = {
+                .platform_data = &my_rotary_encoder_info0,
+        }
+};
+
+static struct rotary_encoder_platform_data my_rotary_encoder_info1 = {
+        .steps         = 16,
+        .axis          = REL_Y,
+        .relative_axis = true,
+        .rollover      = true,
+        .gpio_a                = GPIO_ROTARY1_A,
+        .gpio_b                = GPIO_ROTARY1_B,
+        .inverted_a    = 0,
+        .inverted_b    = 0,
+        .half_period   = true,
+};
+
+static struct platform_device rotary_encoder_device1 = {
+        .name          = "rotary-encoder",
+        .id            = 1,
+        .dev           = {
+                .platform_data = &my_rotary_encoder_info1,
+        }
+};
+
+/* GPIO buttons */
+#define GPIO_KEY_0  TEGRA_GPIO_PB6
+#define GPIO_KEY_1  TEGRA_GPIO_PK3
+#define GPIO_KEY_2  TEGRA_GPIO_PK2
+#define GPIO_KEY_3  TEGRA_GPIO_PK7
+#define GPIO_KEY_4  TEGRA_GPIO_PV3
+#ifdef EVAL_BOARD
+#define ACTIVE_LOW 1
+#else
+#define ACTIVE_LOW 0
+#endif
+
+static struct gpio_keys_button gpio_keys_button[] = {
+        {
+                .code			= KEY_F1,
+                .type			= EV_KEY,
+                .gpio			= GPIO_KEY_0,
+                .active_low		= ACTIVE_LOW,
+                .wakeup			= 0,
+                .debounce_interval	= 0, /* ms */
+                .desc			= "Button 0 (rotary left)",
+        },
+        {
+                .code			= KEY_1,
+                .type			= EV_KEY,
+                .gpio			= GPIO_KEY_1,
+                .active_low		= ACTIVE_LOW,
+                .wakeup			= 0,
+                .debounce_interval	= 0, /* ms */
+                .desc			= "Button 1",
+        },
+        {
+                .code			= KEY_2,
+                .type			= EV_KEY,
+                .gpio			= GPIO_KEY_2,
+                .active_low		= ACTIVE_LOW,
+                .wakeup			= 0,
+                .debounce_interval	= 0, /* ms */
+                .desc			= "Button 2",
+        },
+        {
+                .code			= KEY_ESC,
+                .type			= EV_KEY,
+                .gpio			= GPIO_KEY_3,
+                .active_low		= ACTIVE_LOW,
+                .wakeup			= 0,
+                .debounce_interval	= 0, /* ms */
+                .desc			= "Button 3",
+        },
+        {
+                .code			= KEY_ENTER,
+                .type			= EV_KEY,
+                .gpio			= GPIO_KEY_4,
+                .active_low		= 1,
+                .wakeup			= 0,
+                .debounce_interval	= 0, /* ms */
+                .desc			= "Button 4 (rotary right)",
+        },
+};
+
+static struct gpio_keys_platform_data gpio_keys_platform_data = {
+        .buttons	= gpio_keys_button,
+        .nbuttons	= ARRAY_SIZE(gpio_keys_button),
+        .rep		= 0,
+};
+
+static struct platform_device displayl_gpio_keys_device = {
+        .name	= "gpio-keys",
+        .id	= -1,
+        .dev 	= {
+                .platform_data	= &gpio_keys_platform_data,
+        }
 };

 static void colibri_t20_gpio_init(void)
@@ -626,59 +789,22 @@
 	}
 }

-/*
- * Fusion touch screen GPIOs (using Toradex display/touch adapater)
- * Iris X16-38, SODIMM pin 28 (PWM B), pen down interrupt
- * Iris X16-39, SODIMM pin 30 (PWM C), reset
- * gpio_request muxes the GPIO function automatically, we only have to make
- * sure input/output muxing is done here...
- */
-static struct fusion_f0710a_init_data colibri_fusion_pdata = {
-	.pinmux_fusion_pins = NULL,
-	.gpio_int = TEGRA_GPIO_PB5, 	/* SO-DIMM 28: Pen down interrupt */
-	.gpio_reset = TEGRA_GPIO_PA6,	/* SO-DIMM 30: Reset interrupt */
-};
-
-/*
- * Atmel touch screen GPIOs (using Toradex display/touch adapter)
- * Aster X3-4, SODIMM pin 107 , pen down interrupt
- * gpio_request muxes the GPIO function automatically, we only have to make
- * sure input/output muxing is done and the GPIO is freed here.
- */
-static struct mxt_platform_data colibri_atmel_pdata = {
-	.suspend_mode = MXT_SUSPEND_T9_CTRL,
-	.irqflags = IRQF_TRIGGER_FALLING,
-#ifdef USE_CAPACITIVE_TOUCH_ADAPTER
-	.gpio_reset = TEGRA_GPIO_PA6,
-#else
-	.gpio_reset = TEGRA_GPIO_PK4,
-#endif
-};
-
 /* I2C */

 /* GEN1_I2C: I2C_SDA/SCL on SODIMM pin 194/196 (e.g. RTC on carrier board) */
 static struct i2c_board_info colibri_t20_i2c_bus1_board_info[] __initdata = {
-	{
-		/* M41T0M6 real time clock on Iris carrier board */
-		I2C_BOARD_INFO("rtc-ds1307", 0x68),
-			.type = "m41t00",
-	},
-	{
-		/* TouchRevolution Fusion 7 and 10 multi-touch controller */
-		I2C_BOARD_INFO("fusion_F0710A", 0x10),
-		.platform_data = &colibri_fusion_pdata,
-	},
-	{
-		/* Atmel MAX TS 7 multi-touch controller */
-		I2C_BOARD_INFO("atmel_mxt_ts", 0x4a),
-		.platform_data = &colibri_atmel_pdata,
-#ifdef USE_CAPACITIVE_TOUCH_ADAPTER
-		.irq = TEGRA_GPIO_TO_IRQ( TEGRA_GPIO_PB5 ),
-#else
-		.irq = TEGRA_GPIO_TO_IRQ( TEGRA_GPIO_PK3 ),
-#endif
-	},
+        {
+                /* ISL12022 real time clock on Display-L board */
+                I2C_BOARD_INFO("rtc-isl12022", 0x6f),
+                .type = "isl12022",
+        },
+       {
+                /* easy I2C mXT224S Driver (from DATA MODUL) on Display-L board */
+                I2C_BOARD_INFO("ts_easy_mXT224S", 0x09),
+                .type = "easy_mXT224S",
+        },
+        {
+        },
 };

 static struct tegra_i2c_platform_data colibri_t20_i2c1_platform_data = {
@@ -774,8 +900,8 @@
 						   Iris X16-14 */
 	GPIO_KEY(KEY_VOLUMEUP, PBB4, 1, 0),	/* SODIMM pin 22 */
 	GPIO_KEY(KEY_VOLUMEDOWN, PBB5, 1, 0),	/* SODIMM pin 24 */
-	GPIO_KEY(KEY_POWER, PV3, 0, 1),		/* SODIMM pin 45,
-						   Iris X16-20 */
+//	GPIO_KEY(KEY_POWER, PV3, 0, 1),		/* SODIMM pin 45,
+//						   Iris X16-20 */
 	GPIO_KEY(KEY_MENU, PK6, 0, 0),		/* SODIMM pin 135 */
 };

@@ -1760,6 +1886,9 @@
 #ifdef CONFIG_W1_MASTER_TEGRA
 	&tegra_w1_device,
 #endif
+        &rotary_encoder_device0,
+        &rotary_encoder_device1,
+        &displayl_gpio_keys_device,
 };

 static void __init colibri_t20_init(void)





diff --git a/arch/arm/mach-tegra/board-colibri_t20.h b/arch/arm/mach-tegra/board-colibri_t20.h
--- a/arch/arm/mach-tegra/board-colibri_t20.h
+++ b/arch/arm/mach-tegra/board-colibri_t20.h
@@ -59,7 +59,7 @@
 #define USBH_PEN	TEGRA_GPIO_PW2	/* SODIMM 129 */

 /* Use SODIMM pin 73 as DAC power save on Iris carrier board */
-#define IRIS
+//#define IRIS

 /* Uncomment for back light and USB hub support on MECS Tellurium carrier
    board */





diff --git a/arch/arm/mach-tegra/board-colibri_t20-power.c b/arch/arm/mach-tegra/board-colibri_t20-power.c
--- a/arch/arm/mach-tegra/board-colibri_t20-power.c
+++ b/arch/arm/mach-tegra/board-colibri_t20-power.c
@@ -173,15 +173,7 @@
 static struct regulator_init_data ldo8_data = REGULATOR_INIT(ldo8, 1800, 1800, OFF, NULL);
 static struct regulator_init_data ldo9_data = REGULATOR_INIT(ldo9, 1250, 3300, OFF, NULL);

-static struct tps6586x_rtc_platform_data rtc_data = {
-	.irq = TEGRA_NR_IRQS + TPS6586X_INT_RTC_ALM1,
-	.start = {
-		.year	= 2009,
-		.month	= 1,
-		.day	= 1,
-	},
-	.cl_sel = TPS6586X_RTC_CL_SEL_12_5PF /* use highest (no external cap) */
-};
+

 #define TPS_REG(_id, _data)			\
 	{					\
@@ -204,11 +196,6 @@
 	TPS_REG(LDO_7, &ldo7_data),
 	TPS_REG(LDO_8, &ldo8_data),
 	TPS_REG(LDO_9, &ldo9_data),
-	{
-		.id		= 0,
-		.name		= "tps6586x-rtc",
-		.platform_data	= &rtc_data,
-	},
 };

 static struct tps6586x_platform_data tps_platform = {




diff --git a/arch/arm/mach-tegra/board-colibri_t20-panel.c b/arch/arm/mach-tegra/board-colibri_t20-panel.c
--- a/arch/arm/mach-tegra/board-colibri_t20-panel.c
+++ b/arch/arm/mach-tegra/board-colibri_t20-panel.c
@@ -42,7 +42,6 @@
 #include "tegra2_host1x_devices.h"

 #ifndef COLIBRI_T20_VI
-#define colibri_t20_bl_enb	TEGRA_GPIO_PT4	/* BL_ON */
 #endif
 #define colibri_t20_hdmi_hpd	TEGRA_GPIO_PN7	/* HOTPLUG_DETECT */
 #ifdef IRIS
@@ -56,35 +55,15 @@

 #ifndef COLIBRI_T20_VI
 static int colibri_t20_backlight_init(struct device *dev) {
-	int ret;
-
-	ret = gpio_request(colibri_t20_bl_enb, "BL_ON");
-	if (ret < 0)
-		return ret;
-
-	ret = gpio_direction_output(colibri_t20_bl_enb, 1);
-	if (ret < 0)
-		gpio_free(colibri_t20_bl_enb);
-
-	return ret;
+	return 0;
 };

 static void colibri_t20_backlight_exit(struct device *dev) {
-	gpio_set_value(colibri_t20_bl_enb, 0);
-	gpio_free(colibri_t20_bl_enb);
 }

 static int colibri_t20_backlight_notify(struct device *dev, int brightness)
 {
-	struct platform_pwm_backlight_data *pdata = dev->platform_data;
-
-	gpio_set_value(colibri_t20_bl_enb, !!brightness);
-
-	/* Unified TFT interface displays (e.g. EDT ET070080DH6) LEDCTRL pin
-	   with inverted behaviour (e.g. 0V brightest vs. 3.3V darkest)
-	   Note: brightness polarity display model specific */
-	if (brightness)	return pdata->max_brightness - brightness;
-	else return brightness;
+    return 0;
 }

 static int colibri_t20_disp1_check_fb(struct device *dev, struct fb_info *info);



